.setorder LITTLE_ENDIAN

# =======================================
# These blocks define how to parse colours for each row
# depending on the colour depth

# In a 24-bit bitmap, each byte is a colour channel
.define(PIXELS24) {
	.repeat(biWidth) {
		.group(pixelData) {
			ubyte rgbBlue
			ubyte rgbGreen
			ubyte rgbRed
		}
	}
	.mark rowEnd
	#Each row is zero padded to a multiple of 4
	.skip 4 - ((&rowEnd - &rowStart) % 4)
}

# In a 1-bit bitmap, each bit corresponds to the colour table
.define(PIXELS1) {
	bits(biWidth)  pixelBits
}

# In a 4-bit bitmap, each nibble corresponds to the colour table
.define(PIXELS4) {
	
}

# In an 8-bit bitmap, each byte is a pixel
.define(PIXELS8) {
   .repeat(biWdith) {
		byte pixel8
   }
}
# =========================================

.group(BITMAPFILEHEADER) {
	string('BM', US-ASCII) bfType
	int		bfSize
	short	bfReserved1
	short	bfReserved2
	int		bfOffBits
}

.group(BITMAPINFOHEADER) {
	int		biSize
	int		biWidth
	int		biHeight 
	short	biPlanes
	short	biBitCount
	int		biCompression
	int		biSizeImage
	int		biXPelsPerMeter
	int		biYPelsPerMeter
	int		biClrUsed
	int		biClrImportant
}

.if(biBitCount != 24) {
    # there will be an RGBQUAD array
	.set randomVar pow(2, biBitCount)
	.repeat(randomVar) {
	    .group(RGBQUAD) {
			ubyte	rgbBlue
			ubyte	rgbGreen
			ubyte	rgbRed
			ubyte	rgbReserved
		}
	}
}

.repeat(biHeight) {
	.mark rowStart
	
	.if(biBitCount == 24) {
		.include PIXELS24	
	}

	.if(biBitCount == 1) {
		.include PIXELS1
	}
	
	.if(biBitCount == 4) {
		.include PIXELS4
	}
	
	.if(biBitCount == 8) {
		.include PIXELS8
	}
}

END
