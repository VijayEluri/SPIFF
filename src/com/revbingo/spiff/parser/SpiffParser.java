/* Generated By:JavaCC: Do not edit this line. SpiffParser.java */
package com.revbingo.spiff.parser;

import com.revbingo.spiff.instructions.*;
import com.revbingo.spiff.evaluator.Evaluator;
import java.util.*;
import java.nio.ByteOrder;

public class SpiffParser implements SpiffParserConstants {

        List<Instruction> instructions = new ArrayList<Instruction>();
        Stack<List<Instruction>> instructionStack = new Stack<List<Instruction>>();
        Map<String, List<Instruction>> defines = new HashMap<String, List<Instruction>>();
        private String defaultEncoding = "UTF-8";

        public List<Instruction> getInstructions(){
                return instructions;
        }

        public void optimise(){
                List<Instruction> allInsts = flatten(instructions);
                for(Instruction i : allInsts) {
                        if(i instanceof ReferencedInstruction) {
                                ReferencedInstruction ri = (ReferencedInstruction) i;
                                if(!Evaluator.isReferenced(ri.getName())) {
                                        ri.setReferenced(false);
                                }
                        }
                }
        }

        private List<Instruction> flatten(List<Instruction> insts){
                List<Instruction> a = new ArrayList<Instruction>();
                for(Instruction i : insts){
                        if(i instanceof Block){
                                a.addAll(flatten(((Block) i).getInstructions()));
                        }else{
                                a.add(i);
                        }
                }
                return a;
        }

  public void start() throws ParseException {
    list();
    jj_consume_token(END);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(0);
          this.optimise();
  }

  final public void list() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TY_STRING:
      case TY_INT:
      case TY_LONG:
      case TY_BYTE:
      case TY_SHORT:
      case TY_DOUBLE:
      case TY_FLOAT:
      case TY_UBYTE:
      case TY_USHORT:
      case TY_UINT:
      case TY_ULONG:
      case EOL:
      case INS_JUMP:
      case INS_SETORDER:
      case INS_REPEAT:
      case INS_GROUP:
      case INS_SKIP:
      case INS_IF:
      case INS_SET:
      case INS_PRINT:
      case INS_MARK:
      case INS_SETENCODING:
      case INS_DEFINE:
      case INS_INCLUDE:
      case COMMENT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TY_STRING:
      case TY_INT:
      case TY_LONG:
      case TY_BYTE:
      case TY_SHORT:
      case TY_DOUBLE:
      case TY_FLOAT:
      case TY_UBYTE:
      case TY_USHORT:
      case TY_UINT:
      case TY_ULONG:
      case INS_JUMP:
      case INS_SETORDER:
      case INS_REPEAT:
      case INS_GROUP:
      case INS_SKIP:
      case INS_IF:
      case INS_SET:
      case INS_PRINT:
      case INS_MARK:
      case INS_SETENCODING:
      case INS_DEFINE:
      case INS_INCLUDE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TY_STRING:
        case TY_INT:
        case TY_LONG:
        case TY_BYTE:
        case TY_SHORT:
        case TY_DOUBLE:
        case TY_FLOAT:
        case TY_UBYTE:
        case TY_USHORT:
        case TY_UINT:
        case TY_ULONG:
          entry();
          break;
        case INS_JUMP:
        case INS_SETORDER:
        case INS_REPEAT:
        case INS_GROUP:
        case INS_SKIP:
        case INS_IF:
        case INS_SET:
        case INS_PRINT:
        case INS_MARK:
        case INS_SETENCODING:
        case INS_DEFINE:
        case INS_INCLUDE:
          instruction();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
        jj_consume_token(COMMENT);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(EOL);
    }
  }

  final public void entry() throws ParseException {
    if (jj_2_1(8)) {
      fixedString();
    } else if (jj_2_2(2)) {
      fixedNumber();
    } else if (jj_2_3(2)) {
      fixedUnsigned();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INS_JUMP:
      jumpInstruction();
      break;
    case INS_SETORDER:
      setOrderInstruction();
      break;
    case INS_REPEAT:
      repeatInstruction();
      break;
    case INS_GROUP:
      groupInstruction();
      break;
    case INS_SKIP:
      skipInstruction();
      break;
    case INS_IF:
      ifInstruction();
      break;
    case INS_SET:
      setInstruction();
      break;
    case INS_PRINT:
      printInstruction();
      break;
    case INS_MARK:
      markInstruction();
      break;
    case INS_SETENCODING:
      setEncodingInstruction();
      break;
    case INS_DEFINE:
      defineInstruction();
      break;
    case INS_INCLUDE:
      includeInstruction();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void includeInstruction() throws ParseException {
                              Token t;
    jj_consume_token(INS_INCLUDE);
    t = jj_consume_token(IDENTIFIER);
                List<Instruction> include = defines.get(t.image);
                if(include == null) {if (true) throw new RuntimeException("Could not get defined block with name " + t.image);}
                instructions.addAll(include);
  }

  final public void defineInstruction() throws ParseException {
                             Token t;
                instructionStack.push(instructions);
                instructions = new ArrayList<Instruction>();
    jj_consume_token(INS_DEFINE);
    jj_consume_token(OPEN_PAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(OPEN_BRACE);
    list();
    jj_consume_token(CLOSE_BRACE);
                defines.put(t.image, instructions);
                instructions = instructionStack.pop();
  }

  final public void setEncodingInstruction() throws ParseException {
                                  Token t;
    jj_consume_token(INS_SETENCODING);
    t = jj_consume_token(ENCODING);
                this.defaultEncoding = t.image;
  }

  final public void setInstruction() throws ParseException {
                          String s; Token t;
    jj_consume_token(INS_SET);
    t = jj_consume_token(IDENTIFIER);
    s = expression();
                SetInstruction ins = new SetInstruction();
                ins.setVarname(t.image);
                ins.setExpression(s);
                instructions.add(ins);
  }

  final public void printInstruction() throws ParseException {
                            Token t; String s;
          PrintInstruction ins = new PrintInstruction();
    jj_consume_token(INS_PRINT);
    if (jj_2_4(3)) {
      s = expression();
                          ins.setVar(s);
    } else if (jj_2_5(3)) {
      t = jj_consume_token(IDENTIFIER);
                          ins.setVar(t.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          instructions.add(ins);
  }

  final public void ifInstruction() throws ParseException {
                         String s;
        instructionStack.push(instructions);
        instructions = new ArrayList<Instruction>();
        IfBlock ins = new IfBlock();
    jj_consume_token(INS_IF);
    jj_consume_token(OPEN_PAR);
    s = expression();
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(OPEN_BRACE);
    list();
    jj_consume_token(CLOSE_BRACE);
                ins.setIfExpression(s);
                ins.setInstructions(instructions);
                instructions = instructionStack.pop();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INS_ELSE:
      jj_consume_token(INS_ELSE);
         instructionStack.push(instructions);
         instructions = new ArrayList<Instruction>();
      jj_consume_token(OPEN_BRACE);
      list();
      jj_consume_token(CLOSE_BRACE);
                ins.setElseInstructions(instructions);
                instructions = instructionStack.pop();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          instructions.add(ins);
  }

  final public void setOrderInstruction() throws ParseException {
                               Token t;
    jj_consume_token(INS_SETORDER);
    t = jj_consume_token(BYTEORDER);
          SetOrderInstruction ins = new SetOrderInstruction();
          ByteOrder order = null;
          if(t.image.equals("LITTLE_ENDIAN")) {
                order = ByteOrder.LITTLE_ENDIAN;
          } else {
                order = ByteOrder.BIG_ENDIAN;
          }
          ins.setOrder(order);
          instructions.add(ins);
  }

  final public void repeatInstruction() throws ParseException {
                             String s;
                instructionStack.push(instructions);
                instructions = new ArrayList<Instruction>();
    jj_consume_token(INS_REPEAT);
    jj_consume_token(OPEN_PAR);
    s = expression();
    jj_consume_token(CLOSE_PAR);
    jj_consume_token(OPEN_BRACE);
    list();
    jj_consume_token(CLOSE_BRACE);
                RepeatBlock ins = new RepeatBlock();
                ins.setRepeatCountExpression(s);
                ins.setInstructions(instructions);
                instructions = instructionStack.pop();
                instructions.add(ins);
  }

  final public void groupInstruction() throws ParseException {
                            Token t;
    jj_consume_token(INS_GROUP);
    jj_consume_token(OPEN_PAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(CLOSE_PAR);
            GroupInstruction ins = new GroupInstruction();
                ins.setGroupName(t.image);
                instructions.add(ins);
    jj_consume_token(OPEN_BRACE);
    list();
    jj_consume_token(CLOSE_BRACE);
                EndGroupInstruction ins2 = new EndGroupInstruction();
                ins2.setGroupName(t.image);
                instructions.add(ins2);
  }

  final public void jumpInstruction() throws ParseException {
                           String s;
    jj_consume_token(INS_JUMP);
    s = expression();
            JumpInstruction ins = new JumpInstruction();
            ins.setExpression(s);
                instructions.add(ins);
  }

  final public void skipInstruction() throws ParseException {
                           String s;
    jj_consume_token(INS_SKIP);
    s = expression();
                SkipInstruction ins = new SkipInstruction();
                ins.setSizeExpression(s);
                instructions.add(ins);
  }

  final public void markInstruction() throws ParseException {
                           Token t;
    jj_consume_token(INS_MARK);
    jj_consume_token(OPEN_PAR);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(CLOSE_PAR);
          MarkInstruction ins = new MarkInstruction();
          ins.setName(t.image);
          instructions.add(ins);
  }

  final public void fixedString() throws ParseException {
                       Token t4, t5; String s;
          FixedLengthString ins = new FixedLengthString();
          ins.setEncoding(defaultEncoding);
    jj_consume_token(TY_STRING);
    jj_consume_token(OPEN_PAR);
    s = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      t5 = jj_consume_token(ENCODING);
                                     ins.setEncoding(t5.image);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAR);
    t4 = jj_consume_token(IDENTIFIER);
         ins.setLengthExpr(s);
         ins.setName(t4.image);
         instructions.add(ins);
  }

  final public void terminatedString() throws ParseException {
                            Token t2, t3;
          TerminatedString ins = new TerminatedString();
          ins.setEncoding(defaultEncoding);
    jj_consume_token(TY_TERM_STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      t3 = jj_consume_token(ENCODING);
      jj_consume_token(CLOSE_PAR);
                                                        ins.setEncoding(t3.image);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    t2 = jj_consume_token(IDENTIFIER);
                ins.setName(t2.image);
                instructions.add(ins);
  }

  final public void fixedNumber() throws ParseException {
                       Token t2, t4;
    t2 = numberType();
    t4 = jj_consume_token(IDENTIFIER);
                FixedLengthNumberFactory insF = new FixedLengthNumberFactory();
                ReferencedInstruction ins = insF.getInstruction(t2.image);
                ins.setName(t4.image);
                instructions.add(ins);
  }

  final public void fixedUnsigned() throws ParseException {
                         Token t1, t2;
    t1 = unsignedNumberType();
    t2 = jj_consume_token(IDENTIFIER);
                FixedLengthUnsignedNumber ins = null;
                if(t1.image.equals("uint")){
                        ins = new UnsignedIntegerInstruction();
                }else if(t1.image.equals("ubyte")){
                        ins = new UnsignedByteInstruction();
                }else if(t1.image.equals("ulong")){
                        ins = new UnsignedLongInstruction();
                }else if(t1.image.equals("ushort")){
                        ins = new UnsignedShortInstruction();
                }
                ins.setName(t2.image);
                instructions.add(ins);
  }

  final public String expression() throws ParseException {
                        String s; Token t;
         StringBuffer b = new StringBuffer();
    s = plusexpression();
                               b.append(s);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case GREATER_THAN:
    case LESS_THAN:
    case NOT_EQUAL:
    case GREATER_OR_EQUAL:
    case LESS_OR_EQUAL:
      t = comparator();
                                 b.append(t.image);
      s = plusexpression();
                                b.append(s);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
          {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public Token comparator() throws ParseException {
                       Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case GREATER_THAN:
      t = jj_consume_token(GREATER_THAN);
      break;
    case LESS_THAN:
      t = jj_consume_token(LESS_THAN);
      break;
    case NOT_EQUAL:
      t = jj_consume_token(NOT_EQUAL);
      break;
    case LESS_OR_EQUAL:
      t = jj_consume_token(LESS_OR_EQUAL);
      break;
    case GREATER_OR_EQUAL:
      t = jj_consume_token(GREATER_OR_EQUAL);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String plusexpression() throws ParseException {
                            Token t; String s;
          StringBuffer expr = new StringBuffer();
    s = term();
                      expr.append(s);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PL_MI_OPERATOR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      t = jj_consume_token(PL_MI_OPERATOR);
                                expr.append(t.image);
      s = term();
                      expr.append(s);
    }
          {if (true) return expr.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String term() throws ParseException {
                  String s; Token t;
          StringBuffer term = new StringBuffer();
    s = operand();
          term.append(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL_DIV_OPERATOR:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(MUL_DIV_OPERATOR);
                                  term.append(t.image);
      s = operand();
                                                                         term.append(s);
    }
          {if (true) return term.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String operand() throws ParseException {
                     Token t; String ex;
          StringBuffer s = new StringBuffer();
    if (jj_2_6(3)) {
      ex = functionCall();
                             s.append(ex);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                        s.append(t.image);
        break;
      case ID_ADDRESS:
        t = jj_consume_token(ID_ADDRESS);
                           String s1 = t.image; s.append(s1.substring(1,s1.length()) + ".address"); Evaluator.addExpression(t.image);
        break;
      case ID_VALUE:
        t = jj_consume_token(ID_VALUE);
                         s.append(t.image); Evaluator.addExpression(t.image);
        break;
      case OPEN_PAR:
        t = jj_consume_token(OPEN_PAR);
                        s.append(t.image);
        ex = expression();
                                                                s.append(ex);
        t = jj_consume_token(CLOSE_PAR);
                                                                                                 s.append(t.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_7(3)) {
          t = jj_consume_token(IDENTIFIER);
                         s.append(t.image); Evaluator.addExpression(t.image);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return s.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String functionCall() throws ParseException {
                        Token t; String ex;
    t = jj_consume_token(IDENTIFIER);
    ex = FormalParameters();
                StringBuffer b = new StringBuffer();
                b.append(t.image);
                b.append(ex);
                {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String FormalParameters() throws ParseException {
                             String ex;
         StringBuffer b = new StringBuffer();
    jj_consume_token(OPEN_PAR);
                     b.append("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAR:
    case INTEGER:
    case FLOAT:
    case IDENTIFIER:
    case ID_VALUE:
    case ID_ADDRESS:
      ex = FormalParameter();
                                        b.append(ex);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        ex = FormalParameter();
                                                b.append(","); b.append(ex);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(CLOSE_PAR);
                      b.append(")");
         {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String FormalParameter() throws ParseException {
                            Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAR:
      jj_consume_token(OPEN_PAR);
      numberType();
      jj_consume_token(CLOSE_PAR);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                           Evaluator.addExpression(t.image);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case ID_VALUE:
      t = jj_consume_token(ID_VALUE);
                         Evaluator.addExpression(t.image);
      break;
    case ID_ADDRESS:
      t = jj_consume_token(ID_ADDRESS);
                            Evaluator.addExpression(t.image);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         System.out.println("Param:" + t.image); {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Token numberType() throws ParseException {
                       Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TY_DOUBLE:
      t = jj_consume_token(TY_DOUBLE);
      break;
    case TY_INT:
      t = jj_consume_token(TY_INT);
      break;
    case TY_BYTE:
      t = jj_consume_token(TY_BYTE);
      break;
    case TY_FLOAT:
      t = jj_consume_token(TY_FLOAT);
      break;
    case TY_SHORT:
      t = jj_consume_token(TY_SHORT);
      break;
    case TY_LONG:
      t = jj_consume_token(TY_LONG);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token unsignedNumberType() throws ParseException {
                               Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TY_UBYTE:
      t = jj_consume_token(TY_UBYTE);
      break;
    case TY_USHORT:
      t = jj_consume_token(TY_USHORT);
      break;
    case TY_ULONG:
      t = jj_consume_token(TY_ULONG);
      break;
    case TY_UINT:
      t = jj_consume_token(TY_UINT);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_9() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(OPEN_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(ID_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(ID_ADDRESS)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(MUL_DIV_OPERATOR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ENCODING)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(PL_MI_OPERATOR)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(TY_STRING)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_9()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(ID_ADDRESS)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ID_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public SpiffParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0xff00ffe8,0xff007fe8,0xff007fe8,0x0,0xff000000,0x0,0x800000,0x80000,0x0,0x0,0x0,0x0,0x80000,0x800000,0x80000,0x80000,0x0,0x7e0,0x7800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20001e,0x1e,0x1e,0x200000,0x1e,0x1,0x0,0x0,0x7e0,0x7e0,0x800,0x1000,0x190000,0x0,0x1f0000,0x0,0x1f0000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SpiffParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SpiffParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SpiffParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SpiffParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpiffParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SpiffParser(SpiffParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SpiffParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
