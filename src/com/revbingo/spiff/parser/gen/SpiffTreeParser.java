/* Generated By:JJTree&JavaCC: Do not edit this line. SpiffTreeParser.java */
/******************************************************************************* * This file is part of SPIFF. *  * SPIFF is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. *  * SPIFF is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License * along with SPIFF.  If not, see <http://www.gnu.org/licenses/>. ******************************************************************************/
package com.revbingo.spiff.parser.gen;
import com.revbingo.spiff.AdfFormatException;
import com.revbingo.spiff.instructions.*;
import com.revbingo.spiff.datatypes.*;
import com.revbingo.spiff.evaluator.Evaluator;
import com.revbingo.spiff.parser.InstructionParser;
import java.util.*;
import java.nio.ByteOrder;
import java.nio.charset.Charset;

public class SpiffTreeParser/*@bgen(jjtree)*/implements SpiffTreeParserTreeConstants, SpiffTreeParserConstants {/*@bgen(jjtree)*/
  protected JJTSpiffTreeParserState jjtree = new JJTSpiffTreeParserState();private List <Instruction> instructions = new ArrayList <Instruction> ();
  private Stack <List<Instruction>> instructionStack = new Stack <List <Instruction>> ();
  private Map <String, List<Instruction>> defines = new HashMap <String, List<Instruction>> ();
  private Map <String, Class<Datatype>> datatypes = new HashMap<String, Class<Datatype>>();
  private Evaluator evaluator = new Evaluator();

  private String defaultEncoding = Charset.defaultCharset().displayName();

  public void optimise() {
    List <Instruction> allInsts = flatten(instructions);
    for (Instruction i : allInsts) {
      if (i instanceof Datatype) {
        Datatype ri = (Datatype) i;
        if (!evaluator.isReferenced(ri.getName())) {
          ri.setReferenced(false);
        }
      }
    }
  }

  public List<Instruction> getInstructions() {
        optimise();
        return instructions;
  }

  private List <Instruction> flatten(List <Instruction> insts) {
    List <Instruction> a = new ArrayList <Instruction> ();
    for (Instruction i : insts) {
      if (i instanceof Block) {
        a.addAll(flatten(((Block) i).getInstructions()));
      } else {
        a.add(i);
      }
    }
    return a;
  }

  final public ASTadf adf() throws ParseException {
                /*@bgen(jjtree) adf */
  ASTadf jjtn000 = new ASTadf(JJTADF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      datatypeDefs();
      list();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(EOL);
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void datatypeDefs() throws ParseException {
 /*@bgen(jjtree) datatypeDefs */
  ASTdatatypeDefs jjtn000 = new ASTdatatypeDefs(JJTDATATYPEDEFS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token id, clazz;
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INS_DATATYPE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(INS_DATATYPE);
        id = jj_consume_token(IDENTIFIER);
        clazz = jj_consume_token(CLASS);
        jj_consume_token(EOL);
                        try {
                                Class<Datatype> datatypeClass = (Class<Datatype>) Class.forName(clazz.image);
                                if(!Datatype.class.isAssignableFrom(datatypeClass)) {
                                        {if (true) throw new AdfFormatException("Custom datatype " + datatypeClass + " does not extend com.revbingo.spiff.datatypes.Datatype");}
                                }
                                datatypes.put(id.image, datatypeClass);
                        } catch (ClassNotFoundException e) {
                                {if (true) throw new AdfFormatException("Unknown datatype class " + clazz.image);}
                        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void list() throws ParseException {
 /*@bgen(jjtree) list */
  ASTlist jjtn000 = new ASTlist(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TY_STRING:
        case TY_INT:
        case TY_LONG:
        case TY_BYTE:
        case TY_SHORT:
        case TY_DOUBLE:
        case TY_FLOAT:
        case TY_UBYTE:
        case TY_USHORT:
        case TY_UINT:
        case TY_ULONG:
        case TY_BITS:
        case TY_BYTES:
        case EOL:
        case INS_JUMP:
        case INS_SETORDER:
        case INS_REPEAT:
        case INS_GROUP:
        case INS_SKIP:
        case INS_IF:
        case INS_SET:
        case INS_MARK:
        case INS_SETENCODING:
        case INS_DEFINE:
        case INS_INCLUDE:
        case IDENTIFIER:
        case COMMENT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TY_STRING:
        case TY_INT:
        case TY_LONG:
        case TY_BYTE:
        case TY_SHORT:
        case TY_DOUBLE:
        case TY_FLOAT:
        case TY_UBYTE:
        case TY_USHORT:
        case TY_UINT:
        case TY_ULONG:
        case TY_BITS:
        case TY_BYTES:
        case INS_JUMP:
        case INS_SETORDER:
        case INS_REPEAT:
        case INS_GROUP:
        case INS_SKIP:
        case INS_IF:
        case INS_SET:
        case INS_MARK:
        case INS_SETENCODING:
        case INS_DEFINE:
        case INS_INCLUDE:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TY_STRING:
          case TY_INT:
          case TY_LONG:
          case TY_BYTE:
          case TY_SHORT:
          case TY_DOUBLE:
          case TY_FLOAT:
          case TY_UBYTE:
          case TY_USHORT:
          case TY_UINT:
          case TY_ULONG:
          case TY_BITS:
          case TY_BYTES:
          case IDENTIFIER:
            entry();
            break;
          case INS_JUMP:
          case INS_SETORDER:
          case INS_REPEAT:
          case INS_GROUP:
          case INS_SKIP:
          case INS_IF:
          case INS_SET:
          case INS_MARK:
          case INS_SETENCODING:
          case INS_DEFINE:
          case INS_INCLUDE:
            instruction();
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT:
          jj_consume_token(COMMENT);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(EOL);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void entry() throws ParseException {
 /*@bgen(jjtree) entry */
  ASTentry jjtn000 = new ASTentry(JJTENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t1, t2;
    try {
      if (jj_2_1(8)) {
        string();
      } else if (jj_2_2(2)) {
        fixedNumber();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TY_BITS:
          bits();
          break;
        case TY_BYTES:
          bytes();
          break;
        case IDENTIFIER:
          t1 = jj_consume_token(IDENTIFIER);
          t2 = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                Class<Datatype> userType = datatypes.get(t1.image);
                if(userType == null) {
                        {if (true) throw new AdfFormatException("Undefined datatype " + t1.image);}
                }
                try {
                        Datatype inst = userType.newInstance();
                        inst.setName(t2.image);
                        instructions.add(inst);
                } catch (InstantiationException e) {
                        {if (true) throw new AdfFormatException("Custom datatype " + userType.getName() + " does not have a no-args constructor or threw an exception");}
                } catch (IllegalAccessException e) {
                        {if (true) throw new AdfFormatException("Custom datatype " + userType.getName() + " does not have a publically accessible no args constructor");}
                }
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void bits() throws ParseException {
 /*@bgen(jjtree) bits */
        ASTbits jjtn000 = new ASTbits(JJTBITS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t2;
        String expr;
    try {
      jj_consume_token(TY_BITS);
      jj_consume_token(OPEN_PAR);
      expr = expression();
      jj_consume_token(CLOSE_PAR);
      t2 = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                BitsInstruction inst = new BitsInstruction();
                inst.setName(t2.image);
                inst.setNumberOfBitsExpr(expr);

                instructions.add(inst);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public void bytes() throws ParseException {
 /*@bgen(jjtree) bytes */
        ASTbytes jjtn000 = new ASTbytes(JJTBYTES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t2;
        String expr;
    try {
      jj_consume_token(TY_BYTES);
      jj_consume_token(OPEN_PAR);
      expr = expression();
      jj_consume_token(CLOSE_PAR);
      t2 = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                BytesInstruction inst = new BytesInstruction();
                inst.setName(t2.image);
                inst.setLengthExpr(expr);

                instructions.add(inst);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public Token numberType() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TY_DOUBLE:
      t = jj_consume_token(TY_DOUBLE);
      break;
    case TY_INT:
      t = jj_consume_token(TY_INT);
      break;
    case TY_BYTE:
      t = jj_consume_token(TY_BYTE);
      break;
    case TY_FLOAT:
      t = jj_consume_token(TY_FLOAT);
      break;
    case TY_SHORT:
      t = jj_consume_token(TY_SHORT);
      break;
    case TY_LONG:
      t = jj_consume_token(TY_LONG);
      break;
    case TY_UBYTE:
      t = jj_consume_token(TY_UBYTE);
      break;
    case TY_USHORT:
      t = jj_consume_token(TY_USHORT);
      break;
    case TY_ULONG:
      t = jj_consume_token(TY_ULONG);
      break;
    case TY_UINT:
      t = jj_consume_token(TY_UINT);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void instruction() throws ParseException {
 /*@bgen(jjtree) instruction */
  ASTinstruction jjtn000 = new ASTinstruction(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INS_JUMP:
        jumpInstruction();
        break;
      case INS_SETORDER:
        setOrderInstruction();
        break;
      case INS_REPEAT:
        repeatInstruction();
        break;
      case INS_GROUP:
        groupInstruction();
        break;
      case INS_SKIP:
        skipInstruction();
        break;
      case INS_IF:
        ifInstruction();
        break;
      case INS_SET:
        setInstruction();
        break;
      case INS_MARK:
        markInstruction();
        break;
      case INS_SETENCODING:
        setEncodingInstruction();
        break;
      case INS_DEFINE:
        defineInstruction();
        break;
      case INS_INCLUDE:
        includeInstruction();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void string() throws ParseException {
 /*@bgen(jjtree) string */
  ASTstring jjtn000 = new ASTstring(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_3(3)) {
        literalString();
      } else if (jj_2_4(3)) {
        fixedString();
      } else if (jj_2_5(3)) {
        terminatedString();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void includeInstruction() throws ParseException {
 /*@bgen(jjtree) includeInstruction */
  ASTincludeInstruction jjtn000 = new ASTincludeInstruction(JJTINCLUDEINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(INS_INCLUDE);
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    List<Instruction> include = defines.get(t.image);
    if (include == null) {
        {if (true) throw new AdfFormatException("Could not get defined block with name " + t.image);}
    }
    instructions.addAll(include);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void defineInstruction() throws ParseException {
 /*@bgen(jjtree) defineInstruction */
  ASTdefineInstruction jjtn000 = new ASTdefineInstruction(JJTDEFINEINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
    instructionStack.push(instructions);
    instructions = new ArrayList < Instruction > ();
      jj_consume_token(INS_DEFINE);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(OPEN_BRACE);
      list();
      jj_consume_token(CLOSE_BRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    defines.put(t.image, instructions);
    instructions = instructionStack.pop();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void setEncodingInstruction() throws ParseException {
 /*@bgen(jjtree) setEncodingInstruction */
  ASTsetEncodingInstruction jjtn000 = new ASTsetEncodingInstruction(JJTSETENCODINGINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(INS_SETENCODING);
      t = jj_consume_token(ENCODING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    this.defaultEncoding = t.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void setInstruction() throws ParseException {
 /*@bgen(jjtree) setInstruction */
  ASTsetInstruction jjtn000 = new ASTsetInstruction(JJTSETINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(INS_SET);
      t = jj_consume_token(IDENTIFIER);
      expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    jjtn000.name = t.image;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ifInstruction() throws ParseException {
 /*@bgen(jjtree) ifInstruction */
  ASTifInstruction jjtn000 = new ASTifInstruction(JJTIFINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
    instructionStack.push(instructions);
    instructions = new ArrayList < Instruction > ();
    IfBlock ins = new IfBlock();
      jj_consume_token(INS_IF);
      jj_consume_token(OPEN_PAR);
      s = expression();
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(OPEN_BRACE);
      list();
      jj_consume_token(CLOSE_BRACE);
    ins.setIfExpression(s);
    ins.setInstructions(instructions);
    instructions = instructionStack.pop();
      if (jj_2_6(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jj_consume_token(INS_ELSE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EOL:
          jj_consume_token(EOL);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      instructionStack.push(instructions);
      instructions = new ArrayList < Instruction > ();
        jj_consume_token(OPEN_BRACE);
        list();
        jj_consume_token(CLOSE_BRACE);
      ins.setElseInstructions(instructions);
      instructions = instructionStack.pop();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    instructions.add(ins);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void setOrderInstruction() throws ParseException {
 /*@bgen(jjtree) setOrderInstruction */
  ASTsetOrderInstruction jjtn000 = new ASTsetOrderInstruction(JJTSETORDERINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(INS_SETORDER);
      t = jj_consume_token(BYTEORDER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    SetOrderInstruction ins = new SetOrderInstruction();
    ByteOrder order = null;
    if (t.image.equals("LITTLE_ENDIAN"))
    {
      order = ByteOrder.LITTLE_ENDIAN;
    }
    else
    {
      order = ByteOrder.BIG_ENDIAN;
    }
    ins.setOrder(order);
    instructions.add(ins);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void repeatInstruction() throws ParseException {
 /*@bgen(jjtree) repeatInstruction */
  ASTrepeatInstruction jjtn000 = new ASTrepeatInstruction(JJTREPEATINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
    instructionStack.push(instructions);
    instructions = new ArrayList < Instruction > ();
      jj_consume_token(INS_REPEAT);
      jj_consume_token(OPEN_PAR);
      s = expression();
      jj_consume_token(CLOSE_PAR);
      jj_consume_token(OPEN_BRACE);
      list();
      jj_consume_token(CLOSE_BRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    RepeatBlock ins = new RepeatBlock();
    ins.setRepeatCountExpression(s);
    ins.setInstructions(instructions);
    instructions = instructionStack.pop();
    instructions.add(ins);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void groupInstruction() throws ParseException {
 /*@bgen(jjtree) groupInstruction */
  ASTgroupInstruction jjtn000 = new ASTgroupInstruction(JJTGROUPINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(INS_GROUP);
      jj_consume_token(OPEN_PAR);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(CLOSE_PAR);
    GroupInstruction ins = new GroupInstruction();
    ins.setGroupName(t.image);
    instructions.add(ins);
      jj_consume_token(OPEN_BRACE);
      list();
      jj_consume_token(CLOSE_BRACE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    EndGroupInstruction ins2 = new EndGroupInstruction();
    ins2.setGroupName(t.image);
    instructions.add(ins2);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void jumpInstruction() throws ParseException {
                          /*@bgen(jjtree) jumpInstruction */
  ASTjumpInstruction jjtn000 = new ASTjumpInstruction(JJTJUMPINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INS_JUMP);
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void skipInstruction() throws ParseException {
                          /*@bgen(jjtree) skipInstruction */
  ASTskipInstruction jjtn000 = new ASTskipInstruction(JJTSKIPINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INS_SKIP);
      expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void markInstruction() throws ParseException {
                          /*@bgen(jjtree) markInstruction */
  ASTmarkInstruction jjtn000 = new ASTmarkInstruction(JJTMARKINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INS_MARK);
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void fixedString() throws ParseException {
 /*@bgen(jjtree) fixedString */
  ASTfixedString jjtn000 = new ASTfixedString(JJTFIXEDSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t4, t5;
  String s;
    try {
        String encoding = defaultEncoding;
      jj_consume_token(TY_STRING);
      jj_consume_token(OPEN_PAR);
      s = expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        t5 = jj_consume_token(ENCODING);
        encoding = t5.image;
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      t4 = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
        FixedLengthString ins = new FixedLengthString(encoding);
    ins.setLengthExpr(s);
    ins.setName(t4.image);
    instructions.add(ins);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void literalString() throws ParseException {
 /*@bgen(jjtree) literalString */
   ASTliteralString jjtn000 = new ASTliteralString(JJTLITERALSTRING);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t1, t4, t5;
    try {
      jj_consume_token(TY_STRING);
        String encoding = defaultEncoding;
      jj_consume_token(OPEN_PAR);
      jj_consume_token(QUOTE);
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(QUOTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        t5 = jj_consume_token(ENCODING);
              encoding = t5.image;
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
      t4 = jj_consume_token(IDENTIFIER);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
        LiteralStringInstruction ins = new LiteralStringInstruction(encoding);
        instructions.add(ins);
        ins.setName(t4.image);
        ins.setLiteral(t1.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void terminatedString() throws ParseException {
 /*@bgen(jjtree) terminatedString */
  ASTterminatedString jjtn000 = new ASTterminatedString(JJTTERMINATEDSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t2, t3;
    try {
        String encoding = defaultEncoding;
      jj_consume_token(TY_STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PAR:
        jj_consume_token(OPEN_PAR);
        t3 = jj_consume_token(ENCODING);
        jj_consume_token(CLOSE_PAR);
      encoding = t3.image;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      t2 = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
        TerminatedString ins = new TerminatedString(encoding);
    ins.setName(t2.image);
    instructions.add(ins);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void fixedNumber() throws ParseException {
 /*@bgen(jjtree) fixedNumber */
  ASTfixedNumber jjtn000 = new ASTfixedNumber(JJTFIXEDNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = numberType();
      jj_consume_token(IDENTIFIER);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
       jjtn000.type = t.image;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  final public String expression() throws ParseException {
 /*@bgen(jjtree) expression */
  ASTexpression jjtn000 = new ASTexpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
      s = comparitiveExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         {if (true) return s;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String comparitiveExpression() throws ParseException {
  String s;
  Token t;
   StringBuffer b = new StringBuffer();
    s = additiveExpression();
    b.append(s);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case GREATER_THAN:
      case LESS_THAN:
      case NOT_EQUAL:
      case GREATER_OR_EQUAL:
      case LESS_OR_EQUAL:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      t = comparator();
                          b.append(t.image);
      s = additiveExpression();
                                  b.append(s);
    }
    {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public Token comparator() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case GREATER_THAN:
      t = jj_consume_token(GREATER_THAN);
      break;
    case LESS_THAN:
      t = jj_consume_token(LESS_THAN);
      break;
    case NOT_EQUAL:
      t = jj_consume_token(NOT_EQUAL);
      break;
    case LESS_OR_EQUAL:
      t = jj_consume_token(LESS_OR_EQUAL);
      break;
    case GREATER_OR_EQUAL:
      t = jj_consume_token(GREATER_OR_EQUAL);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String additiveExpression() throws ParseException {
  Token t;
  String s;
    StringBuffer expr = new StringBuffer();
    s = multiplicativeExpression();
                                          expr.append(s);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PL_MI_OPERATOR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      t = jj_consume_token(PL_MI_OPERATOR);
                                        expr.append(t.image);
      s = multiplicativeExpression();
                                         expr.append(s);
    }
    {if (true) return expr.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicativeExpression() throws ParseException {
  String s;
  Token t;
    StringBuffer term = new StringBuffer();
    s = unaryExpression();
                            term.append(s);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL_DIV_OPERATOR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(MUL_DIV_OPERATOR);
                               term.append(t.image);
      s = unaryExpression();
                               term.append(s);
    }
    {if (true) return term.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String unaryExpression() throws ParseException {
  Token t; String ex;
    StringBuffer s = new StringBuffer();
    if (jj_2_7(2)) {
      ex = functionCall();
                            s.append(ex);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PL_MI_OPERATOR:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PL_MI_OPERATOR:
          t = jj_consume_token(PL_MI_OPERATOR);
                              s.append(t.image);
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        t = jj_consume_token(INTEGER);
                                                                   s.append(t.image);
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_8(2)) {
          t = jj_consume_token(IDENTIFIER);
      s.append(t.image);
      evaluator.cacheExpression(t.image);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case HEX_INTEGER:
            t = jj_consume_token(HEX_INTEGER);
                s.append(t.image);
            break;
          case ID_ADDRESS:
            t = jj_consume_token(ID_ADDRESS);
      String s1 = t.image;
      s.append(s1.substring(1, s1.length()) + ".address");
      evaluator.cacheExpression(t.image);
            break;
          case ID_VALUE:
            t = jj_consume_token(ID_VALUE);
      s.append(t.image);
      evaluator.cacheExpression(t.image);
            break;
          case OPEN_PAR:
            t = jj_consume_token(OPEN_PAR);
      s.append(t.image);
            ex = comparitiveExpression();
      s.append(ex);
            t = jj_consume_token(CLOSE_PAR);
      s.append(t.image);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return s.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String functionCall() throws ParseException {
  Token t;
  String ex;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPEN_PAR);
    ex = FormalParameters();
    jj_consume_token(CLOSE_PAR);
    StringBuffer b = new StringBuffer();
    b.append(t.image);
    b.append(ex);
    {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String FormalParameters() throws ParseException {
  String ex;
    StringBuffer b = new StringBuffer();
    b.append("(");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PAR:
    case PL_MI_OPERATOR:
    case IDENTIFIER:
    case ID_VALUE:
    case ID_ADDRESS:
    case FLOAT:
    case HEX_INTEGER:
    case INTEGER:
      ex = FormalParameter();
      b.append(ex);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        ex = FormalParameter();
        b.append(",");
        b.append(ex);
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    b.append(")");
    {if (true) return b.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String FormalParameter() throws ParseException {
  Token t = null;
  String expr;
    if (jj_2_9(2)) {
      expr = comparitiveExpression();
        {if (true) return expr;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
      evaluator.cacheExpression(t.image);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case ID_VALUE:
        t = jj_consume_token(ID_VALUE);
      evaluator.cacheExpression(t.image);
        break;
      case ID_ADDRESS:
        t = jj_consume_token(ID_ADDRESS);
      evaluator.cacheExpression(t.image);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_16() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(PL_MI_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(INS_ELSE)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(OPEN_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(MUL_DIV_OPERATOR)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(ENCODING)) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(TY_STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(PL_MI_OPERATOR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ENCODING)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(TY_STRING)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_scan_token(QUOTE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(QUOTE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ID_ADDRESS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(CLOSE_PAR)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(ID_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ENCODING)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ID_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(ID_ADDRESS)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(HEX_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(TY_STRING)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSE_PAR)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SpiffTreeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x0,0xfc01fff8,0xfc00fff8,0xfc00fff8,0x0,0xc000,0x3ff0,0xfc000000,0x10000,0x10000,0x1000000,0x1000000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x1000000,0x100000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80,0x110079,0x10079,0x10079,0x100000,0x10000,0x0,0x79,0x0,0x0,0x0,0x0,0x0,0x3f00,0x3f00,0x4000,0x8000,0x4000,0x804000,0x4a0000,0x0,0xeb4000,0xab0000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SpiffTreeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SpiffTreeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SpiffTreeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SpiffTreeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SpiffTreeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SpiffTreeParser(SpiffTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SpiffTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
