/* Generated By:JavaCC: Do not edit this line. SpiffParserConstants.java */
package com.revbingo.spiff.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SpiffParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TY_STRING = 3;
  /** RegularExpression Id. */
  int TY_INT = 4;
  /** RegularExpression Id. */
  int TY_LONG = 5;
  /** RegularExpression Id. */
  int TY_BYTE = 6;
  /** RegularExpression Id. */
  int TY_SHORT = 7;
  /** RegularExpression Id. */
  int TY_DOUBLE = 8;
  /** RegularExpression Id. */
  int TY_FLOAT = 9;
  /** RegularExpression Id. */
  int TY_UBYTE = 10;
  /** RegularExpression Id. */
  int TY_USHORT = 11;
  /** RegularExpression Id. */
  int TY_UINT = 12;
  /** RegularExpression Id. */
  int TY_ULONG = 13;
  /** RegularExpression Id. */
  int EOL = 14;
  /** RegularExpression Id. */
  int BYTEORDER = 15;
  /** RegularExpression Id. */
  int ENCODING = 16;
  /** RegularExpression Id. */
  int END = 17;
  /** RegularExpression Id. */
  int OPEN_PAR = 18;
  /** RegularExpression Id. */
  int CLOSE_PAR = 19;
  /** RegularExpression Id. */
  int OPEN_BRACE = 20;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int INS_JUMP = 23;
  /** RegularExpression Id. */
  int INS_SETORDER = 24;
  /** RegularExpression Id. */
  int INS_REPEAT = 25;
  /** RegularExpression Id. */
  int INS_GROUP = 26;
  /** RegularExpression Id. */
  int INS_SKIP = 27;
  /** RegularExpression Id. */
  int INS_IF = 28;
  /** RegularExpression Id. */
  int INS_SET = 29;
  /** RegularExpression Id. */
  int INS_PRINT = 30;
  /** RegularExpression Id. */
  int INS_ELSE = 31;
  /** RegularExpression Id. */
  int INS_MARK = 32;
  /** RegularExpression Id. */
  int INS_SETENCODING = 33;
  /** RegularExpression Id. */
  int INS_DEFINE = 34;
  /** RegularExpression Id. */
  int INS_INCLUDE = 35;
  /** RegularExpression Id. */
  int EQUAL = 36;
  /** RegularExpression Id. */
  int GREATER_THAN = 37;
  /** RegularExpression Id. */
  int LESS_THAN = 38;
  /** RegularExpression Id. */
  int NOT_EQUAL = 39;
  /** RegularExpression Id. */
  int GREATER_OR_EQUAL = 40;
  /** RegularExpression Id. */
  int LESS_OR_EQUAL = 41;
  /** RegularExpression Id. */
  int PL_MI_OPERATOR = 42;
  /** RegularExpression Id. */
  int MUL_DIV_OPERATOR = 43;
  /** RegularExpression Id. */
  int DIGIT = 44;
  /** RegularExpression Id. */
  int ALPHA = 45;
  /** RegularExpression Id. */
  int ALPHANUM = 46;
  /** RegularExpression Id. */
  int INTEGER = 47;
  /** RegularExpression Id. */
  int FLOAT = 48;
  /** RegularExpression Id. */
  int IDENTIFIER = 49;
  /** RegularExpression Id. */
  int ID_VALUE = 50;
  /** RegularExpression Id. */
  int ID_ADDRESS = 51;
  /** RegularExpression Id. */
  int COMMENT = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"string\"",
    "\"int\"",
    "\"long\"",
    "\"byte\"",
    "\"short\"",
    "\"double\"",
    "\"float\"",
    "\"ubyte\"",
    "\"ushort\"",
    "\"uint\"",
    "\"ulong\"",
    "<EOL>",
    "<BYTEORDER>",
    "<ENCODING>",
    "<END>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\".jump\"",
    "\".setorder\"",
    "\".repeat\"",
    "\".group\"",
    "\".skip\"",
    "\".if\"",
    "\".set\"",
    "\".print\"",
    "\".else\"",
    "\".mark\"",
    "\".setencoding\"",
    "\".define\"",
    "\".include\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "<PL_MI_OPERATOR>",
    "<MUL_DIV_OPERATOR>",
    "<DIGIT>",
    "<ALPHA>",
    "<ALPHANUM>",
    "<INTEGER>",
    "<FLOAT>",
    "<IDENTIFIER>",
    "<ID_VALUE>",
    "<ID_ADDRESS>",
    "<COMMENT>",
  };

}
